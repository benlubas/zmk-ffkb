#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define HOME_L 0
#define NAV_L 1
#define SYM_L 2
#define BT_L 3

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};

/ {
  combos {
    compatible = "zmk,combos";
    combo_esc {
      timeout-ms = <50>;
      key-positions = <20 21>; // jk
      bindings = <&kp ESC>;
    };
    combo_caps {
      timeout-ms = <50>;
      key-positions = <31 32>; // nm
      bindings = <&caps_word>;
    };
    combo_desktop_left {
      timeout-ms = <40>;
      key-positions = <6 19>; // yh
      bindings = <&kp LC(LEFT)>;
    };
    combo_desktop_right {
      timeout-ms = <40>;
      key-positions = <9 22>; // ol
      bindings = <&kp LC(RIGHT)>;
    };
    combo_del {
      timeout-ms = <50>;
      key-positions = <10 23>; // p'
      bindings = <&kp DEL>;
    };
    combo_bkspc {
      timeout-ms = <25>;
      key-positions = <15 16>; // df
      bindings = <&kp BSPC>;
    };
    combo_tab {
      timeout-ms = <25>;
      key-positions = <14 16>; // sf
      bindings = <&kp TAB>;
    };
    combo_bootloader {
      timeout-ms = <50>;
      key-positions = <26 27 28 29>; // zxcv
      bindings = <&bootloader>;
    };
    combo_rest {
      timeout-ms = <50>;
      key-positions = <4 5 16 17>; // rtfg
      bindings = <&reset>;
    };
    combo_bt {
      timeout-ms = <50>;
      key-positions = <29 30 31 32>; // vbnm
      bindings = <&to BT_L>;
    };
  };
};

/ {

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none &kp Q        &kp W     &kp E     &kp R     &kp T          &kp Y     &kp U     &kp I       &kp O     &kp P          &none
        &none &kp A        &kp S     &kp D     &kp F     &kp G   &none  &kp H     &kp J     &kp K       &kp L     &kp SQT        &none
        &none &mt LSHIFT Z &kp X     &kp C     &kp V     &kp B          &kp N     &kp M     &kp COMMA   &kp DOT   &mt RSHIFT RET &none
                           &none     &kp LMETA &sl NAV_L &kp LCTRL      &sl SYM_L &kp SPACE &kp RALT    &none
        >;
    };

    nav_layer {
      bindings = <
        &trans &kp TAB  &kp N7   &kp N8    &kp N9    &kp MINUS         &kp LS(LC(TAB))  &kp AMPS   &kp N8  &kp LC(TAB)  &kp BSPC  &trans
        &trans &kp N0   &kp N4   &kp N5    &kp N6    &kp ENTER   &none &kp LEFT         &kp DOWN   &kp UP  &kp RIGHT    &kp N6    &trans
        &trans &trans   &kp N1   &kp N2    &kp N3    &trans            &trans           &trans     &trans  &trans       &trans    &trans
        &trans &trans &trans &trans &trans &trans &trans &trans
        >;
    };

    sym_layer {
      bindings = <
        &trans &kp EXCL  &kp AT    &kp PLUS &kp EQUAL  &kp MINUS         &kp PRCNT &kp AMPS  &kp ASTRK  &kp LPAR     &kp RPAR  &trans
        &trans &kp HASH  &kp GRAVE &kp PIPE &kp LBKT   &kp RBKT  &none   &kp RBRC  &kp LBRC  &kp COLON  &kp SEMI     &kp FSLH  &trans
        &trans &trans    &kp TILDE &kp BSLH &kp DOLLAR &trans            &trans    &kp UNDER &kp CARET  &kp QUESTION &trans    &trans
        &trans &trans &trans &trans &trans &trans &trans &trans
        >;
    };

    bt_layer {
      bindings = <
      &trans &bt BT_CLR   &trans       &trans       &trans       &trans            &trans &trans &trans &trans &trans     &trans
      &trans &trans       &trans       &trans       &trans       &trans    &none   &trans &trans &trans &trans &to HOME_L &trans
      &trans &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5      &trans &trans &trans &trans &trans     &trans
      &trans &trans &trans &trans &trans &trans &trans &trans
      >;
    };

  };
};
