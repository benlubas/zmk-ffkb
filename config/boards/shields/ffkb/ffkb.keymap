#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define HOME_L 0
#define NAV_L 1
#define SYM_L 2
#define FN_L 3
#define BT_L 4

// Two key, a c macro that produces zmk macros
// I'm not actually using this, I'm going to keep it here in case I want to make changes and decide
// to use this though.
#define TK(a, b) \
  tk##a##b: two_key##a##b {\
    label = "two_key" #a #b;\
    compatible = "zmk,behavior-macro";\
    #binding-cells = <0>;\
    wait-ms = <0>;\
    tap-ms = <0>;\
    bindings = <&kp a>, <&kp b>;\
  };

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
  behaviors {
    caps: tap_dance_caps {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <250>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    cmsk: combo_mod_stickey_key {
      compatible = "zmk,behavior-sticky-key";
      #binding-cells = <1>;
      label = "COMBO_MOD_STICKY_KEY";
      bindings = <&kp>;
      release-after-ms = <10000>;
      quick-release;
      ignore-modifiers;
    };
    rctrl_cm: jucombo_mod {
      compatible = "zmk,behavior-hold-tap";
      flavor = "tap-preferred";
      label = "JUCOMBO_MOD";
      tapping-term-ms = <150>; // must hold for 150ms to trigger mod
      #binding-cells = <2>;
      bindings = <&cmsk>, <&tkJU>;
    };
    rcmd_cm: kicombo_mod {
      compatible = "zmk,behavior-hold-tap";
      flavor = "tap-preferred";
      label = "KICOMBO_MOD";
      tapping-term-ms = <150>; // must hold for 150ms to trigger mod
      #binding-cells = <2>;
      bindings = <&cmsk>, <&tkKI>;
    };
    ralt_cm: locombo_mod {
      compatible = "zmk,behavior-hold-tap";
      flavor = "tap-preferred";
      label = "LOCOMBO_MOD";
      tapping-term-ms = <150>; // must hold for 150ms to trigger mod
      #binding-cells = <2>;
      bindings = <&cmsk>, <&tkLO>;
    };
    lalt_cm: facombo_mod {
      compatible = "zmk,behavior-hold-tap";
      flavor = "tap-preferred";
      label = "SWCOMBO_MOD";
      tapping-term-ms = <150>; // must hold for 150ms to trigger mod
      #binding-cells = <2>;
      bindings = <&cmsk>, <&tkSW>;
    };
    lcmd_cm: decombo_mod {
      compatible = "zmk,behavior-hold-tap";
      flavor = "tap-preferred";
      label = "DECOMBO_MOD";
      tapping-term-ms = <150>; // must hold for 150ms to trigger mod
      #binding-cells = <2>;
      bindings = <&cmsk>, <&tkDE>;
    };
    lctrl_cm: fdcombo_mod {
      compatible = "zmk,behavior-hold-tap";
      flavor = "tap-preferred";
      label = "FRCOMBO_MOD";
      tapping-term-ms = <150>; // must hold for 150ms to trigger mod
      #binding-cells = <2>;
      bindings = <&cmsk>, <&tkFR>;
    };
  };
};

/ {
  macros {
    tkJU: two_keyJU {
      label = "two_keyJU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings = <&kp J>, <&kp U>;
    };
    tkKI: two_keyKI {
      label = "two_keyKI";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings = <&kp K>, <&kp I>;
    };
    tkLO: two_keyLO {
      label = "two_keyLO";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings = <&kp L>, <&kp O>;
    };
    tkFR: two_keyFR {
      label = "two_keyFR";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings = <&kp F>, <&kp R>;
    };
    tkDE: two_keyDE {
      label = "two_keyDE";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings = <&kp D>, <&kp E>;
    };
    tkSW: two_keyAF {
      label = "two_keySW";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <0>;
      tap-ms = <0>;
      bindings = <&kp S>, <&kp W>;
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";

    combo_del {
      timeout-ms = <50>;
      key-positions = <10 23>; // p'
      bindings = <&kp DEL>;
    };
    combo_bootloader {
      timeout-ms = <50>;
      key-positions = <26 27 28 29>; // zxcv
      bindings = <&bootloader>;
    };
    combo_reset {
      timeout-ms = <50>;
      key-positions = <4 5 16 17>; // rtfg
      bindings = <&sys_reset>;
    };
    combo_bt {
      timeout-ms = <50>;
      key-positions = <29 30 31 32>; // vbnm
      bindings = <&to BT_L>;
    };
    // COMBO MODS
     combo_lctrl {
       timeout-ms = <40>;
       key-positions = <16 4>; // fr
       bindings = <&lctrl_cm LCTRL 0>;
     };
     combo_lsuper {
       timeout-ms = <35>;
       key-positions = <15 3>; // de
       bindings = <&lcmd_cm LGUI 0>;
     };
     combo_lalt {
       timeout-ms = <35>;
       key-positions = <14 2>; // sw
       bindings = <&lalt_cm LALT 0>;
     };
     combo_rctrl {
       timeout-ms = <35>;
       key-positions = <20 7>; // ju
       bindings = <&rctrl_cm RCTRL 0>;
     };
     combo_rsuper {
       timeout-ms = <35>;
       key-positions = <21 8>; // ki
       bindings = <&rcmd_cm RGUI 0>;
     };
     combo_ralt {
       timeout-ms = <35>;
       key-positions = <22 9>; // lo
       bindings = <&ralt_cm RALT 0>;
     };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none &kp Q        &kp W     &kp E     &kp R     &kp T          &kp Y     &kp U     &kp I       &kp O     &kp P          &none
        &none &kp A        &kp S     &kp D     &kp F     &kp G   &none  &kp H     &kp J     &kp K       &kp L     &kp SQT        &none
        &none &mt LSHIFT Z &kp X     &kp C     &kp V     &kp B          &kp N     &kp M     &kp COMMA   &kp DOT   &mt RSHIFT RET &none
                           &none     &kp ESC   &sl NAV_L &key_repeat    &sl SYM_L &kp SPACE &caps       &none
        >;
    };

    nav_layer {
      bindings = <
        &trans &kp TAB  &kp N7   &kp N8    &kp N9    &kp MINUS         &kp LS(LC(TAB))  &trans     &trans  &kp LC(TAB)  &kp BSPC  &trans
        &trans &kp N0   &kp N4   &kp N5    &kp N6    &kp ENTER   &none &kp LEFT         &kp DOWN   &kp UP  &kp RIGHT    &trans    &trans
        &trans &trans   &kp N1   &kp N2    &kp N3    &kp DOT           &mo FN_L         &mo FN_L   &trans  &trans       &trans    &trans
        &trans &trans &trans &trans &trans &trans &trans &trans
        >;
    };

    sym_layer {
      bindings = <
        &trans &kp EXCL  &kp AT    &kp PLUS &kp EQUAL  &kp MINUS         &kp PRCNT &kp AMPS  &kp ASTRK  &kp LPAR     &kp RPAR  &trans
        &trans &kp HASH  &kp GRAVE &kp PIPE &kp LBKT   &kp RBKT  &none   &kp RBRC  &kp LBRC  &kp COLON  &kp SEMI     &kp FSLH  &trans
        &trans &trans    &kp TILDE &kp BSLH &kp DOLLAR &trans            &trans    &kp UNDER &kp CARET  &kp QUESTION &trans    &trans
        &trans &trans &trans &trans &trans &trans &trans &trans
        >;
    };

    fn_layer {
      bindings = <
        &trans &trans    &kp F7 &kp F8 &kp F9 &trans            &kp F11 &kp F12 &kp F13 &kp F14 &kp F15 &trans
        &trans &kp F10   &kp F4 &kp F5 &kp F6 &trans    &none   &kp F16 &kp F17 &kp F18 &kp F19 &kp F20 &trans
        &trans &trans    &kp F1 &kp F2 &kp F3 &trans            &trans  &trans  &trans  &trans  &trans  &trans
        &trans &trans &trans &trans &trans &trans &trans &trans
        >;
    };

    bt_layer {
      bindings = <
      &trans &bt BT_CLR   &trans       &trans       &trans       &trans            &trans &trans &trans &trans &trans     &trans
      &trans &trans       &trans       &trans       &trans       &trans    &none   &trans &trans &trans &trans &to HOME_L &trans
      &trans &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5      &trans &trans &trans &trans &trans     &trans
      &trans &trans &trans &trans &trans &trans &trans &trans
      >;
    };

  };
};
// vi: tw=0
